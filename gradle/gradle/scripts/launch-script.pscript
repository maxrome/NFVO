APP_NAME="openbaton-nfvo"
PID_FILE=~/.openbaton-nfvo.pid
LOG_FILE=/var/log/openbaton/openbaton-nfvo.log
DEFAULT_CONFIG_FILE_PATH=/etc/openbaton/openbaton-nfvo.properties
###################

FIRST_APP_ARG=$(echo $APP_ARGS | awk '{print $1;}' | sed "s/'//g")
START_COMMAND=${@#$FIRST_APP_ARG}

# Rabbitmq check
check_rabbitmq () {
    instance=$(ps aux | grep -v grep | grep rabbitmq | wc -l)
    if [ ${instance} -eq 0 ]; then
        echo "rabbitmq is not running"
        echo "Note: once you start rabbitmq make sure to have the admin user with all the privileges"
        echo "Those are the commands:"
        echo "rabbitmqctl add_user admin openbaton"
        echo "rabbitmqctl set_user_tags admin administrator"
        echo 'rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"'
        exit 1
    fi
}

# it returns the process pid in the PID_FILE or -1 if not found
get_pid () {
	local PID
	if [ -e "$PID_FILE" ]; then
		PID=$(cat "$PID_FILE")
	fi

	if [ -n "$PID" ]; then
		echo $PID
	else
		echo -1
	fi
}

# 1 = is running
# 0 = is not running
check_running () {
    local PID
    PID=$(get_pid)

    if [ $PID -eq -1 ]; then
        echo "0"
    elif [ -n "$(ps -p"$PID" -opid=)" ]; then
        echo "1"
    else
        # here the process pid is in PID_FILE but the process is not running
        echo "0"
    fi
}

check_already_running () {
    IS_RUNNING="$(check_running)"

    if [ $IS_RUNNING -eq 1 ]; then
    	echo "$APP_NAME is already running"
  	    exit 1
    fi
}

configure () {
    check_already_running
    check_rabbitmq
}

start_fg () {
    configure
    echo "Starting $APP_NAME"
    if [[ $START_COMMAND == *"--spring.config.location=file:"* ]]; then
        $JAVACMD $START_COMMAND
    else
        $JAVACMD $START_COMMAND --spring.config.location=file:$DEFAULT_CONFIG_FILE_PATH
    fi
}

start () {
    configure
    echo "Starting $APP_NAME"

    if [[ $START_COMMAND == *"--spring.config.location=file:"* ]]; then
      nohup $JAVACMD $START_COMMAND > /dev/null 2>&1 &
      echo $! > $PID_FILE
    else
      nohup $JAVACMD $START_COMMAND --spring.config.location=file:$DEFAULT_CONFIG_FILE_PATH > /dev/null 2>&1 &
      echo $! > $PID_FILE
    fi

    APP_PID="-1"
	COUNTER=60
	IS_RUNNING=0
	while [ $IS_RUNNING -eq 0 -a $COUNTER -gt 0 ]; do
		IS_RUNNING=$(check_running)
		printf "."
		APP_PID="$(get_pid)"
	    COUNTER=$(($COUNTER-1))
	    sleep 1
	done

	if [ $COUNTER -eq 0 ]; then
		echo "Failed to start $APP_NAME"
		exit 1
	fi
	echo "$APP_NAME started"
}

stop (){
    IS_RUNNING=$(check_running)

	if [ $IS_RUNNING -eq 0 ]; then
		echo "$APP_NAME not running"
		return 1
	else
	    echo "Stopping $APP_NAME"
		APP_PID="$(get_pid)"
		kill $APP_PID
		COUNTER=10

		while [ $IS_RUNNING -eq 1 -a $COUNTER -gt 0 ]; do
			IS_RUNNING=$(check_running)
			printf "."

			COUNTER=$(($COUNTER-1))
			sleep 1
		done

		if [ $COUNTER -eq 0 ]; then
			echo "Failed to stop process $APP_PID, try 'force-stop'."
			exit 1
		fi
        rm "$PIDFILE" 2> /dev/null
		echo "$APP_NAME stopped"

	fi
}

force_stop () {
	IS_RUNNING="$(check_running)"

	if [ $IS_RUNNING -eq 0 ]; then
		echo "$APP_NAME not running"
	else
	    APP_PID="$(get_pid)"
		kill -9 "$APP_PID"

		sleep 1

		IS_RUNNING="$(check_running)"

		if [ $IS_RUNNING -eq 1 ]; then
			echo "Failed to kill -9 $APP_PID"
		else
			rm "$PIDFILE" 2> /dev/null
			echo "Killed $APP_NAME (pid $APP_PID)."
		fi
	fi
}

status () {
    IS_RUNNING="$(check_running)"

    if [ $IS_RUNNING -eq 0 ]; then
   		echo "$APP_NAME is not running"
   	else
   		echo "$APP_NAME is running"
   	fi
}

usage () {
    echo "Usage: $APP_NAME COMMAND [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "start     [OPTIONS]"
    echo "start_fg  [OPTIONS]"
    echo "status"
    echo "stop"
    echo "force_stop"
    echo ""
    echo "OPTIONS:"
    echo "--<property>:<value>  key and value of a property in the config file, e.g. --spring.config.location=file:<PATH TO THE CONFIG FILE>)"
}

##
#   MAIN
##

if [ $(echo "$APP_ARGS" | wc -w) -eq 0 ]
then
        usage
        exit 1
fi

case ${FIRST_APP_ARG} in
    "start" )
        start ;;
    "stop" )
        stop ;;
    "status" )
        status ;;
    "force_stop" )
        force_stop ;;
    "start_fg" )
        start_fg ;;
     *)
        usage;;
esac
